
Door_Lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000978  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000aa8  08000ab0  00001ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000aa8  08000aa8  00001ab0  2**0
                  CONTENTS
  4 .ARM          00000000  08000aa8  08000aa8  00001ab0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aa8  08000ab0  00001ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aa8  08000aa8  00001aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000aac  08000aac  00001aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000000  08000ab0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08000ab0  000020ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000024b6  00000000  00000000  00001ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009e4  00000000  00000000  00003f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001230  00000000  00000000  00004973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000298  00000000  00000000  00005ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000230  00000000  00000000  00005e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000017f8  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003dd6  00000000  00000000  00007868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cceb  00000000  00000000  0000b63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00018329  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000908  00000000  00000000  0001836c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a90 	.word	0x08000a90

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a90 	.word	0x08000a90

08000170 <wait_cycles>:
//extern void ReadDoorSensor_Runnable();
//extern void DoorLock_indication_runnable();

#define CYCLES_PER_LOOP 3

void wait_cycles( uint32_t n ) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t l = n/CYCLES_PER_LOOP;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	4a07      	ldr	r2, [pc, #28]	@ (8000198 <wait_cycles+0x28>)
 800017c:	fba2 2303 	umull	r2, r3, r2, r3
 8000180:	085b      	lsrs	r3, r3, #1
 8000182:	60fb      	str	r3, [r7, #12]
	asm volatile( "0:" "SUBS %[count], 1;" "BNE 0b;" :[count]"+r"(l) );
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	3b01      	subs	r3, #1
 8000188:	d1fd      	bne.n	8000186 <wait_cycles+0x16>
 800018a:	60fb      	str	r3, [r7, #12]
}
 800018c:	bf00      	nop
 800018e:	3714      	adds	r7, #20
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	aaaaaaab 	.word	0xaaaaaaab

0800019c <MCU_init>:


void MCU_init () {
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0

	//==================GPIO INIT =============================

	//Enable CLock
	RCC_GPIOA_CLK_EN();
 80001a2:	4b0f      	ldr	r3, [pc, #60]	@ (80001e0 <MCU_init+0x44>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	4a0e      	ldr	r2, [pc, #56]	@ (80001e0 <MCU_init+0x44>)
 80001a8:	f043 0304 	orr.w	r3, r3, #4
 80001ac:	6193      	str	r3, [r2, #24]

	//PA3 ---> Door Sensor
	GPIO_PinConfig_t PinCfg_Door_Sensor ;

	PinCfg_Door_Sensor.GPIO_PinNumber = GPIO_PIN_3;
 80001ae:	2308      	movs	r3, #8
 80001b0:	80bb      	strh	r3, [r7, #4]
	PinCfg_Door_Sensor.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80001b2:	2301      	movs	r3, #1
 80001b4:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &PinCfg_Door_Sensor);
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	4619      	mov	r1, r3
 80001ba:	480a      	ldr	r0, [pc, #40]	@ (80001e4 <MCU_init+0x48>)
 80001bc:	f000 f918 	bl	80003f0 <MCAL_GPIO_Init>

	//PA7 ---> Led On/OFF

	PinCfg_Door_Sensor.GPIO_PinNumber = GPIO_PIN_7;
 80001c0:	2380      	movs	r3, #128	@ 0x80
 80001c2:	80bb      	strh	r3, [r7, #4]
	PinCfg_Door_Sensor.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001c4:	2304      	movs	r3, #4
 80001c6:	71bb      	strb	r3, [r7, #6]
	PinCfg_Door_Sensor.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001c8:	2301      	movs	r3, #1
 80001ca:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &PinCfg_Door_Sensor);
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	4619      	mov	r1, r3
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <MCU_init+0x48>)
 80001d2:	f000 f90d 	bl	80003f0 <MCAL_GPIO_Init>
}
 80001d6:	bf00      	nop
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	40021000 	.word	0x40021000
 80001e4:	40010800 	.word	0x40010800

080001e8 <StartOS>:
void StartOS ()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	unsigned char i = 0 ;
 80001ee:	2300      	movs	r3, #0
 80001f0:	71fb      	strb	r3, [r7, #7]
	//as we will focus on implement OS and used accurate time based on the timer later on AUTOSAR OS unit
	//But nw we focused only on APPLICATion Layer
	while (1)
	{
		//memec RTE_Event_10ms
		if (i==10)
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b0a      	cmp	r3, #10
 80001f6:	d103      	bne.n	8000200 <StartOS+0x18>
		{
			//ReadDoorSensor_Runnable();
			i++ ;
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	3301      	adds	r3, #1
 80001fc:	71fb      	strb	r3, [r7, #7]
 80001fe:	e008      	b.n	8000212 <StartOS+0x2a>
		}else if (i==12)
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	2b0c      	cmp	r3, #12
 8000204:	d102      	bne.n	800020c <StartOS+0x24>
		{
			//memec RTE_Event_12ms
			//DoorLock_indication_runnable();
			i=0 ;
 8000206:	2300      	movs	r3, #0
 8000208:	71fb      	strb	r3, [r7, #7]
 800020a:	e002      	b.n	8000212 <StartOS+0x2a>
		}else
		{
			i++ ;
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	3301      	adds	r3, #1
 8000210:	71fb      	strb	r3, [r7, #7]
		}
		wait_cycles(10);
 8000212:	200a      	movs	r0, #10
 8000214:	f7ff ffac 	bl	8000170 <wait_cycles>
		if (i==10)
 8000218:	e7eb      	b.n	80001f2 <StartOS+0xa>

0800021a <main>:
	}

}

int main(void)
{
 800021a:	b580      	push	{r7, lr}
 800021c:	af00      	add	r7, sp, #0
	MCU_init();
 800021e:	f7ff ffbd 	bl	800019c <MCU_init>
	StartOS();
 8000222:	f7ff ffe1 	bl	80001e8 <StartOS>
	/* Loop forever */
	while(1)
 8000226:	bf00      	nop
 8000228:	e7fd      	b.n	8000226 <main+0xc>
	...

0800022c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800022c:	480d      	ldr	r0, [pc, #52]	@ (8000264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800022e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000230:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000234:	480c      	ldr	r0, [pc, #48]	@ (8000268 <LoopForever+0x6>)
  ldr r1, =_edata
 8000236:	490d      	ldr	r1, [pc, #52]	@ (800026c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000238:	4a0d      	ldr	r2, [pc, #52]	@ (8000270 <LoopForever+0xe>)
  movs r3, #0
 800023a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800023c:	e002      	b.n	8000244 <LoopCopyDataInit>

0800023e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000242:	3304      	adds	r3, #4

08000244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000248:	d3f9      	bcc.n	800023e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024a:	4a0a      	ldr	r2, [pc, #40]	@ (8000274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800024c:	4c0a      	ldr	r4, [pc, #40]	@ (8000278 <LoopForever+0x16>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000250:	e001      	b.n	8000256 <LoopFillZerobss>

08000252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000254:	3204      	adds	r2, #4

08000256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000258:	d3fb      	bcc.n	8000252 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025a:	f000 fbf5 	bl	8000a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800025e:	f7ff ffdc 	bl	800021a <main>

08000262 <LoopForever>:

LoopForever:
    b LoopForever
 8000262:	e7fe      	b.n	8000262 <LoopForever>
  ldr   r0, =_estack
 8000264:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800026c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000270:	08000ab0 	.word	0x08000ab0
  ldr r2, =_sbss
 8000274:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000278:	200000ac 	.word	0x200000ac

0800027c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800027c:	e7fe      	b.n	800027c <ADC1_2_IRQHandler>
	...

08000280 <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800028a:	88fb      	ldrh	r3, [r7, #6]
 800028c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000290:	f000 80a5 	beq.w	80003de <Get_CRLH_Position+0x15e>
 8000294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000298:	f300 80a3 	bgt.w	80003e2 <Get_CRLH_Position+0x162>
 800029c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80002a0:	f000 809b 	beq.w	80003da <Get_CRLH_Position+0x15a>
 80002a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80002a8:	f300 809b 	bgt.w	80003e2 <Get_CRLH_Position+0x162>
 80002ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80002b0:	f000 8091 	beq.w	80003d6 <Get_CRLH_Position+0x156>
 80002b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80002b8:	f300 8093 	bgt.w	80003e2 <Get_CRLH_Position+0x162>
 80002bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80002c0:	f000 8087 	beq.w	80003d2 <Get_CRLH_Position+0x152>
 80002c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80002c8:	f300 808b 	bgt.w	80003e2 <Get_CRLH_Position+0x162>
 80002cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80002d0:	d07d      	beq.n	80003ce <Get_CRLH_Position+0x14e>
 80002d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80002d6:	f300 8084 	bgt.w	80003e2 <Get_CRLH_Position+0x162>
 80002da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80002de:	d074      	beq.n	80003ca <Get_CRLH_Position+0x14a>
 80002e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80002e4:	dc7d      	bgt.n	80003e2 <Get_CRLH_Position+0x162>
 80002e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80002ea:	d06c      	beq.n	80003c6 <Get_CRLH_Position+0x146>
 80002ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80002f0:	dc77      	bgt.n	80003e2 <Get_CRLH_Position+0x162>
 80002f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80002f6:	d064      	beq.n	80003c2 <Get_CRLH_Position+0x142>
 80002f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80002fc:	dc71      	bgt.n	80003e2 <Get_CRLH_Position+0x162>
 80002fe:	2b80      	cmp	r3, #128	@ 0x80
 8000300:	d05d      	beq.n	80003be <Get_CRLH_Position+0x13e>
 8000302:	2b80      	cmp	r3, #128	@ 0x80
 8000304:	dc6d      	bgt.n	80003e2 <Get_CRLH_Position+0x162>
 8000306:	2b20      	cmp	r3, #32
 8000308:	dc48      	bgt.n	800039c <Get_CRLH_Position+0x11c>
 800030a:	2b00      	cmp	r3, #0
 800030c:	dd69      	ble.n	80003e2 <Get_CRLH_Position+0x162>
 800030e:	3b01      	subs	r3, #1
 8000310:	2b1f      	cmp	r3, #31
 8000312:	d866      	bhi.n	80003e2 <Get_CRLH_Position+0x162>
 8000314:	a201      	add	r2, pc, #4	@ (adr r2, 800031c <Get_CRLH_Position+0x9c>)
 8000316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031a:	bf00      	nop
 800031c:	080003a3 	.word	0x080003a3
 8000320:	080003a7 	.word	0x080003a7
 8000324:	080003e3 	.word	0x080003e3
 8000328:	080003ab 	.word	0x080003ab
 800032c:	080003e3 	.word	0x080003e3
 8000330:	080003e3 	.word	0x080003e3
 8000334:	080003e3 	.word	0x080003e3
 8000338:	080003af 	.word	0x080003af
 800033c:	080003e3 	.word	0x080003e3
 8000340:	080003e3 	.word	0x080003e3
 8000344:	080003e3 	.word	0x080003e3
 8000348:	080003e3 	.word	0x080003e3
 800034c:	080003e3 	.word	0x080003e3
 8000350:	080003e3 	.word	0x080003e3
 8000354:	080003e3 	.word	0x080003e3
 8000358:	080003b3 	.word	0x080003b3
 800035c:	080003e3 	.word	0x080003e3
 8000360:	080003e3 	.word	0x080003e3
 8000364:	080003e3 	.word	0x080003e3
 8000368:	080003e3 	.word	0x080003e3
 800036c:	080003e3 	.word	0x080003e3
 8000370:	080003e3 	.word	0x080003e3
 8000374:	080003e3 	.word	0x080003e3
 8000378:	080003e3 	.word	0x080003e3
 800037c:	080003e3 	.word	0x080003e3
 8000380:	080003e3 	.word	0x080003e3
 8000384:	080003e3 	.word	0x080003e3
 8000388:	080003e3 	.word	0x080003e3
 800038c:	080003e3 	.word	0x080003e3
 8000390:	080003e3 	.word	0x080003e3
 8000394:	080003e3 	.word	0x080003e3
 8000398:	080003b7 	.word	0x080003b7
 800039c:	2b40      	cmp	r3, #64	@ 0x40
 800039e:	d00c      	beq.n	80003ba <Get_CRLH_Position+0x13a>
 80003a0:	e01f      	b.n	80003e2 <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0 ;
 80003a2:	2300      	movs	r3, #0
 80003a4:	e01e      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 80003a6:	2304      	movs	r3, #4
 80003a8:	e01c      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 80003aa:	2308      	movs	r3, #8
 80003ac:	e01a      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 80003ae:	230c      	movs	r3, #12
 80003b0:	e018      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 80003b2:	2310      	movs	r3, #16
 80003b4:	e016      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 80003b6:	2314      	movs	r3, #20
 80003b8:	e014      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 80003ba:	2318      	movs	r3, #24
 80003bc:	e012      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 80003be:	231c      	movs	r3, #28
 80003c0:	e010      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 80003c2:	2300      	movs	r3, #0
 80003c4:	e00e      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 80003c6:	2304      	movs	r3, #4
 80003c8:	e00c      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 80003ca:	2308      	movs	r3, #8
 80003cc:	e00a      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 80003ce:	230c      	movs	r3, #12
 80003d0:	e008      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 80003d2:	2310      	movs	r3, #16
 80003d4:	e006      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 80003d6:	2314      	movs	r3, #20
 80003d8:	e004      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 80003da:	2318      	movs	r3, #24
 80003dc:	e002      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 80003de:	231c      	movs	r3, #28
 80003e0:	e000      	b.n	80003e4 <Get_CRLH_Position+0x164>
		break ;


	}
return 0 ;
 80003e2:	2300      	movs	r3, #0

}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop

080003f0 <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init  (GPIO_TypeDef *GPIOx , GPIO_PinConfig_t* PinConfig)
{
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
	volatile uint32_t* configregister = NULL ;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
	uint8_t	PIN_Config = 0 ;
 80003fe:	2300      	movs	r3, #0
 8000400:	72fb      	strb	r3, [r7, #11]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	881b      	ldrh	r3, [r3, #0]
 8000406:	2bff      	cmp	r3, #255	@ 0xff
 8000408:	d801      	bhi.n	800040e <MCAL_GPIO_Init+0x1e>
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	e001      	b.n	8000412 <MCAL_GPIO_Init+0x22>
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3304      	adds	r3, #4
 8000412:	60fb      	str	r3, [r7, #12]

	//CNF0[1:0] MODE0[1:0=]   Clear the four Bits
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff ff31 	bl	8000280 <Get_CRLH_Position>
 800041e:	4603      	mov	r3, r0
 8000420:	461a      	mov	r2, r3
 8000422:	230f      	movs	r3, #15
 8000424:	4093      	lsls	r3, r2
 8000426:	43da      	mvns	r2, r3
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	401a      	ands	r2, r3
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP ) ||  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD ) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD ) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ))
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	789b      	ldrb	r3, [r3, #2]
 8000436:	2b04      	cmp	r3, #4
 8000438:	d00b      	beq.n	8000452 <MCAL_GPIO_Init+0x62>
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	789b      	ldrb	r3, [r3, #2]
 800043e:	2b05      	cmp	r3, #5
 8000440:	d007      	beq.n	8000452 <MCAL_GPIO_Init+0x62>
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	789b      	ldrb	r3, [r3, #2]
 8000446:	2b07      	cmp	r3, #7
 8000448:	d003      	beq.n	8000452 <MCAL_GPIO_Init+0x62>
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	789b      	ldrb	r3, [r3, #2]
 800044e:	2b06      	cmp	r3, #6
 8000450:	d11c      	bne.n	800048c <MCAL_GPIO_Init+0x9c>
	{
		PIN_Config  =  (  ( ( (PinConfig->GPIO_MODE - 4) <<2 ) |  PinConfig->GPIO_Output_Speed   ) & 0x0F );
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	789b      	ldrb	r3, [r3, #2]
 8000456:	3b04      	subs	r3, #4
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	b25a      	sxtb	r2, r3
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	78db      	ldrb	r3, [r3, #3]
 8000460:	b25b      	sxtb	r3, r3
 8000462:	4313      	orrs	r3, r2
 8000464:	b25b      	sxtb	r3, r3
 8000466:	b2db      	uxtb	r3, r3
 8000468:	f003 030f 	and.w	r3, r3, #15
 800046c:	72fb      	strb	r3, [r7, #11]
		(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 800046e:	7afc      	ldrb	r4, [r7, #11]
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff ff03 	bl	8000280 <Get_CRLH_Position>
 800047a:	4603      	mov	r3, r0
 800047c:	fa04 f203 	lsl.w	r2, r4, r3
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	431a      	orrs	r2, r3
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	e057      	b.n	800053c <MCAL_GPIO_Init+0x14c>
	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG ) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO ) )
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	789b      	ldrb	r3, [r3, #2]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d003      	beq.n	800049c <MCAL_GPIO_Init+0xac>
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	789b      	ldrb	r3, [r3, #2]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d115      	bne.n	80004c8 <MCAL_GPIO_Init+0xd8>
		{
			PIN_Config  =  (  ( ( PinConfig->GPIO_MODE <<2 ) |  0x0   ) & 0x0F );
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	789b      	ldrb	r3, [r3, #2]
 80004a0:	009b      	lsls	r3, r3, #2
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	f003 030f 	and.w	r3, r3, #15
 80004a8:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80004aa:	7afc      	ldrb	r4, [r7, #11]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff fee5 	bl	8000280 <Get_CRLH_Position>
 80004b6:	4603      	mov	r3, r0
 80004b8:	fa04 f203 	lsl.w	r2, r4, r3
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	431a      	orrs	r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	e039      	b.n	800053c <MCAL_GPIO_Init+0x14c>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT )
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	789b      	ldrb	r3, [r3, #2]
 80004cc:	2b08      	cmp	r3, #8
 80004ce:	d110      	bne.n	80004f2 <MCAL_GPIO_Init+0x102>
		{
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_FLO <<2 ) |  0x0   ) & 0x0F );
 80004d0:	2304      	movs	r3, #4
 80004d2:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80004d4:	7afc      	ldrb	r4, [r7, #11]
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff fed0 	bl	8000280 <Get_CRLH_Position>
 80004e0:	4603      	mov	r3, r0
 80004e2:	fa04 f203 	lsl.w	r2, r4, r3
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	431a      	orrs	r2, r3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 80004f0:	e024      	b.n	800053c <MCAL_GPIO_Init+0x14c>
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_PU <<2 ) |  0x0   ) & 0x0F );
 80004f2:	2308      	movs	r3, #8
 80004f4:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80004f6:	7afc      	ldrb	r4, [r7, #11]
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff febf 	bl	8000280 <Get_CRLH_Position>
 8000502:	4603      	mov	r3, r0
 8000504:	fa04 f203 	lsl.w	r2, r4, r3
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	431a      	orrs	r2, r3
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	601a      	str	r2, [r3, #0]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	789b      	ldrb	r3, [r3, #2]
 8000516:	2b02      	cmp	r3, #2
 8000518:	d107      	bne.n	800052a <MCAL_GPIO_Init+0x13a>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	683a      	ldr	r2, [r7, #0]
 8000520:	8812      	ldrh	r2, [r2, #0]
 8000522:	431a      	orrs	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	60da      	str	r2, [r3, #12]
}
 8000528:	e008      	b.n	800053c <MCAL_GPIO_Init+0x14c>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	8812      	ldrh	r2, [r2, #0]
 8000532:	43d2      	mvns	r2, r2
 8000534:	401a      	ands	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60da      	str	r2, [r3, #12]
}
 800053a:	e7ff      	b.n	800053c <MCAL_GPIO_Init+0x14c>
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}

08000544 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000548:	4b05      	ldr	r3, [pc, #20]	@ (8000560 <EXTI0_IRQHandler+0x1c>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <EXTI0_IRQHandler+0x1c>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000554:	4b03      	ldr	r3, [pc, #12]	@ (8000564 <EXTI0_IRQHandler+0x20>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4798      	blx	r3
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40010400 	.word	0x40010400
 8000564:	2000001c 	.word	0x2000001c

08000568 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 800056c:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <EXTI1_IRQHandler+0x1c>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	4a04      	ldr	r2, [pc, #16]	@ (8000584 <EXTI1_IRQHandler+0x1c>)
 8000572:	f043 0302 	orr.w	r3, r3, #2
 8000576:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 8000578:	4b03      	ldr	r3, [pc, #12]	@ (8000588 <EXTI1_IRQHandler+0x20>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	4798      	blx	r3
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40010400 	.word	0x40010400
 8000588:	2000001c 	.word	0x2000001c

0800058c <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <EXTI2_IRQHandler+0x1c>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a04      	ldr	r2, [pc, #16]	@ (80005a8 <EXTI2_IRQHandler+0x1c>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 800059c:	4b03      	ldr	r3, [pc, #12]	@ (80005ac <EXTI2_IRQHandler+0x20>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4798      	blx	r3
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010400 	.word	0x40010400
 80005ac:	2000001c 	.word	0x2000001c

080005b0 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 80005b4:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <EXTI3_IRQHandler+0x1c>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a04      	ldr	r2, [pc, #16]	@ (80005cc <EXTI3_IRQHandler+0x1c>)
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 80005c0:	4b03      	ldr	r3, [pc, #12]	@ (80005d0 <EXTI3_IRQHandler+0x20>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	4798      	blx	r3
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40010400 	.word	0x40010400
 80005d0:	2000001c 	.word	0x2000001c

080005d4 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 80005d8:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <EXTI4_IRQHandler+0x1c>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a04      	ldr	r2, [pc, #16]	@ (80005f0 <EXTI4_IRQHandler+0x1c>)
 80005de:	f043 0310 	orr.w	r3, r3, #16
 80005e2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 80005e4:	4b03      	ldr	r3, [pc, #12]	@ (80005f4 <EXTI4_IRQHandler+0x20>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4798      	blx	r3
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40010400 	.word	0x40010400
 80005f4:	2000001c 	.word	0x2000001c

080005f8 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 80005fc:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	f003 0320 	and.w	r3, r3, #32
 8000604:	2b00      	cmp	r3, #0
 8000606:	d008      	beq.n	800061a <EXTI9_5_IRQHandler+0x22>
 8000608:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a22      	ldr	r2, [pc, #136]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 800060e:	f043 0320 	orr.w	r3, r3, #32
 8000612:	6153      	str	r3, [r2, #20]
 8000614:	4b21      	ldr	r3, [pc, #132]	@ (800069c <EXTI9_5_IRQHandler+0xa4>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 800061a:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000622:	2b00      	cmp	r3, #0
 8000624:	d008      	beq.n	8000638 <EXTI9_5_IRQHandler+0x40>
 8000626:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a1b      	ldr	r2, [pc, #108]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 800062c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <EXTI9_5_IRQHandler+0xa4>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 8000638:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000640:	2b00      	cmp	r3, #0
 8000642:	d008      	beq.n	8000656 <EXTI9_5_IRQHandler+0x5e>
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	4a13      	ldr	r2, [pc, #76]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 800064a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800064e:	6153      	str	r3, [r2, #20]
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <EXTI9_5_IRQHandler+0xa4>)
 8000652:	69db      	ldr	r3, [r3, #28]
 8000654:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800065e:	2b00      	cmp	r3, #0
 8000660:	d008      	beq.n	8000674 <EXTI9_5_IRQHandler+0x7c>
 8000662:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a0c      	ldr	r2, [pc, #48]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 8000668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <EXTI9_5_IRQHandler+0xa4>)
 8000670:	6a1b      	ldr	r3, [r3, #32]
 8000672:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 8000674:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800067c:	2b00      	cmp	r3, #0
 800067e:	d008      	beq.n	8000692 <EXTI9_5_IRQHandler+0x9a>
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <EXTI9_5_IRQHandler+0xa0>)
 8000686:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800068a:	6153      	str	r3, [r2, #20]
 800068c:	4b03      	ldr	r3, [pc, #12]	@ (800069c <EXTI9_5_IRQHandler+0xa4>)
 800068e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000690:	4798      	blx	r3

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40010400 	.word	0x40010400
 800069c:	2000001c 	.word	0x2000001c

080006a0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 80006a4:	4b2d      	ldr	r3, [pc, #180]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d008      	beq.n	80006c2 <EXTI15_10_IRQHandler+0x22>
 80006b0:	4b2a      	ldr	r3, [pc, #168]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	4a29      	ldr	r2, [pc, #164]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 80006b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006ba:	6153      	str	r3, [r2, #20]
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <EXTI15_10_IRQHandler+0xc0>)
 80006be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006c0:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 80006c2:	4b26      	ldr	r3, [pc, #152]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d008      	beq.n	80006e0 <EXTI15_10_IRQHandler+0x40>
 80006ce:	4b23      	ldr	r3, [pc, #140]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	4a22      	ldr	r2, [pc, #136]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 80006d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006d8:	6153      	str	r3, [r2, #20]
 80006da:	4b21      	ldr	r3, [pc, #132]	@ (8000760 <EXTI15_10_IRQHandler+0xc0>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006de:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 80006e0:	4b1e      	ldr	r3, [pc, #120]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d008      	beq.n	80006fe <EXTI15_10_IRQHandler+0x5e>
 80006ec:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	4a1a      	ldr	r2, [pc, #104]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 80006f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006f6:	6153      	str	r3, [r2, #20]
 80006f8:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <EXTI15_10_IRQHandler+0xc0>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fc:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d008      	beq.n	800071c <EXTI15_10_IRQHandler+0x7c>
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a13      	ldr	r2, [pc, #76]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 8000710:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <EXTI15_10_IRQHandler+0xc0>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071a:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000724:	2b00      	cmp	r3, #0
 8000726:	d008      	beq.n	800073a <EXTI15_10_IRQHandler+0x9a>
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	4a0b      	ldr	r2, [pc, #44]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000732:	6153      	str	r3, [r2, #20]
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <EXTI15_10_IRQHandler+0xc0>)
 8000736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000738:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d008      	beq.n	8000758 <EXTI15_10_IRQHandler+0xb8>
 8000746:	4b05      	ldr	r3, [pc, #20]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a04      	ldr	r2, [pc, #16]	@ (800075c <EXTI15_10_IRQHandler+0xbc>)
 800074c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b03      	ldr	r3, [pc, #12]	@ (8000760 <EXTI15_10_IRQHandler+0xc0>)
 8000754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000756:	4798      	blx	r3

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40010400 	.word	0x40010400
 8000760:	2000001c 	.word	0x2000001c

08000764 <I2C1_ER_IRQHandler>:
	return (uint8_t) I2Cx->DR;
}


void I2C1_ER_IRQHandler (void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler (void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read = 0 ;
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
	I2C_TypeDef* I2Cx = I2C1 ;
 800077a:	4b37      	ldr	r3, [pc, #220]	@ (8000858 <I2C1_EV_IRQHandler+0xe8>)
 800077c:	617b      	str	r3, [r7, #20]
	//Interrupt handling for both master and slave mode of a device
	uint32_t temp1, temp2, temp3;

	temp1   = I2Cx->CR2 & (  I2C_CR2_ITEVTEN) ;
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000786:	613b      	str	r3, [r7, #16]
	temp2   = I2Cx->CR2 & ( I2C_CR2_ITBUFEN) ;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000790:	60fb      	str	r3, [r7, #12]
	temp3  = I2Cx->SR1 & ( I2C_SR1_STOPF);
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f003 0310 	and.w	r3, r3, #16
 800079a:	60bb      	str	r3, [r7, #8]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00a      	beq.n	80007b8 <I2C1_EV_IRQHandler+0x48>
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d007      	beq.n	80007b8 <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 80007b0:	2100      	movs	r1, #0
 80007b2:	6978      	ldr	r0, [r7, #20]
 80007b4:	f000 f852 	bl	800085c <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	f003 0302 	and.w	r3, r3, #2
 80007c0:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d012      	beq.n	80007ee <I2C1_EV_IRQHandler+0x7e>
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00f      	beq.n	80007ee <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d109      	bne.n	80007ee <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADDR_Matched);
 80007e6:	2102      	movs	r1, #2
 80007e8:	6978      	ldr	r0, [r7, #20]
 80007ea:	f000 f837 	bl	800085c <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d00f      	beq.n	800081e <I2C1_EV_IRQHandler+0xae>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00c      	beq.n	800081e <I2C1_EV_IRQHandler+0xae>
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d009      	beq.n	800081e <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d103      	bne.n	800081e <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000816:	2103      	movs	r1, #3
 8000818:	6978      	ldr	r0, [r7, #20]
 800081a:	f000 f81f 	bl	800085c <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000826:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00f      	beq.n	800084e <I2C1_EV_IRQHandler+0xde>
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00c      	beq.n	800084e <I2C1_EV_IRQHandler+0xde>
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d009      	beq.n	800084e <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	2b00      	cmp	r3, #0
 8000844:	d103      	bne.n	800084e <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000846:	2104      	movs	r1, #4
 8000848:	6978      	ldr	r0, [r7, #20]
 800084a:	f000 f807 	bl	800085c <Slave_States>
			}
		}



}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40005400 	.word	0x40005400

0800085c <Slave_States>:


void Slave_States (I2C_TypeDef* I2Cx  ,Slave_State state)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a32      	ldr	r2, [pc, #200]	@ (8000934 <Slave_States+0xd8>)
 800086c:	4293      	cmp	r3, r2
 800086e:	bf14      	ite	ne
 8000870:	2301      	movne	r3, #1
 8000872:	2300      	moveq	r3, #0
 8000874:	b2db      	uxtb	r3, r3
 8000876:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	2b04      	cmp	r3, #4
 800087c:	d856      	bhi.n	800092c <Slave_States+0xd0>
 800087e:	a201      	add	r2, pc, #4	@ (adr r2, 8000884 <Slave_States+0x28>)
 8000880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000884:	0800089f 	.word	0x0800089f
 8000888:	08000899 	.word	0x08000899
 800088c:	080008c3 	.word	0x080008c3
 8000890:	080008db 	.word	0x080008db
 8000894:	080008ff 	.word	0x080008ff
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 800089c:	e046      	b.n	800092c <Slave_States+0xd0>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d03b      	beq.n	8000922 <Slave_States+0xc6>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	4922      	ldr	r1, [pc, #136]	@ (8000938 <Slave_States+0xdc>)
 80008ae:	4613      	mov	r3, r2
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	4413      	add	r3, r2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	440b      	add	r3, r1
 80008b8:	3320      	adds	r3, #32
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2000      	movs	r0, #0
 80008be:	4798      	blx	r3
		}

		break ;
 80008c0:	e02f      	b.n	8000922 <Slave_States+0xc6>
	}

	case I2C_EV_ADDR_Matched:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADDR_Matched) ;
 80008c2:	7bfa      	ldrb	r2, [r7, #15]
 80008c4:	491c      	ldr	r1, [pc, #112]	@ (8000938 <Slave_States+0xdc>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	440b      	add	r3, r1
 80008d0:	3320      	adds	r3, #32
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2002      	movs	r0, #2
 80008d6:	4798      	blx	r3

		break ;
 80008d8:	e028      	b.n	800092c <Slave_States+0xd0>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d01f      	beq.n	8000926 <Slave_States+0xca>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 80008e6:	7bfa      	ldrb	r2, [r7, #15]
 80008e8:	4913      	ldr	r1, [pc, #76]	@ (8000938 <Slave_States+0xdc>)
 80008ea:	4613      	mov	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	4413      	add	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	440b      	add	r3, r1
 80008f4:	3320      	adds	r3, #32
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2003      	movs	r0, #3
 80008fa:	4798      	blx	r3
		}

		break ;
 80008fc:	e013      	b.n	8000926 <Slave_States+0xca>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10f      	bne.n	800092a <Slave_States+0xce>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 800090a:	7bfa      	ldrb	r2, [r7, #15]
 800090c:	490a      	ldr	r1, [pc, #40]	@ (8000938 <Slave_States+0xdc>)
 800090e:	4613      	mov	r3, r2
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	4413      	add	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	440b      	add	r3, r1
 8000918:	3320      	adds	r3, #32
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2004      	movs	r0, #4
 800091e:	4798      	blx	r3
		}

		break ;
 8000920:	e003      	b.n	800092a <Slave_States+0xce>
		break ;
 8000922:	bf00      	nop
 8000924:	e002      	b.n	800092c <Slave_States+0xd0>
		break ;
 8000926:	bf00      	nop
 8000928:	e000      	b.n	800092c <Slave_States+0xd0>
		break ;
 800092a:	bf00      	nop
	}
	}

}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40005400 	.word	0x40005400
 8000938:	20000058 	.word	0x20000058

0800093c <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler (void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler (void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <SPI1_IRQHandler>:
 * 							Generic Functions
 * =======================================================================================
 */
//ISR
void SPI1_IRQHandler (void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI1->SPI_SR &  (1<<1)) >> 1 );
 800095a:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <SPI1_IRQHandler+0x54>)
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	085b      	lsrs	r3, r3, #1
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	793b      	ldrb	r3, [r7, #4]
 8000968:	f362 0300 	bfi	r3, r2, #0, #1
 800096c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SPI_SR &  (1<<0)) >> 0 );
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <SPI1_IRQHandler+0x54>)
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	793b      	ldrb	r3, [r7, #4]
 800097a:	f362 0341 	bfi	r3, r2, #1, #1
 800097e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SPI_SR &  (1<<4)) >> 4 );
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <SPI1_IRQHandler+0x54>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	091b      	lsrs	r3, r3, #4
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	b2da      	uxtb	r2, r3
 800098c:	793b      	ldrb	r3, [r7, #4]
 800098e:	f362 0382 	bfi	r3, r2, #2, #1
 8000992:	713b      	strb	r3, [r7, #4]


	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack (irq_src) ;
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <SPI1_IRQHandler+0x58>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	7938      	ldrb	r0, [r7, #4]
 800099c:	4798      	blx	r3

}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40013000 	.word	0x40013000
 80009ac:	200000a0 	.word	0x200000a0

080009b0 <SPI2_IRQHandler>:
void SPI2_IRQHandler (void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src ;
	irq_src.TXE = ( ( SPI2->SPI_SR &  (1<<1)) >> 1 );
 80009b6:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <SPI2_IRQHandler+0x54>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	085b      	lsrs	r3, r3, #1
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	793b      	ldrb	r3, [r7, #4]
 80009c4:	f362 0300 	bfi	r3, r2, #0, #1
 80009c8:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI2->SPI_SR &  (1<<0)) >> 0 );
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <SPI2_IRQHandler+0x54>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	793b      	ldrb	r3, [r7, #4]
 80009d6:	f362 0341 	bfi	r3, r2, #1, #1
 80009da:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI2->SPI_SR &  (1<<4)) >> 4 );
 80009dc:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <SPI2_IRQHandler+0x54>)
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	091b      	lsrs	r3, r3, #4
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	793b      	ldrb	r3, [r7, #4]
 80009ea:	f362 0382 	bfi	r3, r2, #2, #1
 80009ee:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack (irq_src) ;
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <SPI2_IRQHandler+0x58>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	7938      	ldrb	r0, [r7, #4]
 80009f8:	4798      	blx	r3
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40003800 	.word	0x40003800
 8000a08:	200000a0 	.word	0x200000a0

08000a0c <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 8000a10:	4b02      	ldr	r3, [pc, #8]	@ (8000a1c <USART1_IRQHandler+0x10>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	691b      	ldr	r3, [r3, #16]
 8000a16:	4798      	blx	r3

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000a8 	.word	0x200000a8

08000a20 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000a24:	4b02      	ldr	r3, [pc, #8]	@ (8000a30 <USART2_IRQHandler+0x10>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	691b      	ldr	r3, [r3, #16]
 8000a2a:	4798      	blx	r3

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000a8 	.word	0x200000a8

08000a34 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000a38:	4b02      	ldr	r3, [pc, #8]	@ (8000a44 <USART3_IRQHandler+0x10>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	691b      	ldr	r3, [r3, #16]
 8000a3e:	4798      	blx	r3


}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000a8 	.word	0x200000a8

08000a48 <__libc_init_array>:
 8000a48:	b570      	push	{r4, r5, r6, lr}
 8000a4a:	2600      	movs	r6, #0
 8000a4c:	4d0c      	ldr	r5, [pc, #48]	@ (8000a80 <__libc_init_array+0x38>)
 8000a4e:	4c0d      	ldr	r4, [pc, #52]	@ (8000a84 <__libc_init_array+0x3c>)
 8000a50:	1b64      	subs	r4, r4, r5
 8000a52:	10a4      	asrs	r4, r4, #2
 8000a54:	42a6      	cmp	r6, r4
 8000a56:	d109      	bne.n	8000a6c <__libc_init_array+0x24>
 8000a58:	f000 f81a 	bl	8000a90 <_init>
 8000a5c:	2600      	movs	r6, #0
 8000a5e:	4d0a      	ldr	r5, [pc, #40]	@ (8000a88 <__libc_init_array+0x40>)
 8000a60:	4c0a      	ldr	r4, [pc, #40]	@ (8000a8c <__libc_init_array+0x44>)
 8000a62:	1b64      	subs	r4, r4, r5
 8000a64:	10a4      	asrs	r4, r4, #2
 8000a66:	42a6      	cmp	r6, r4
 8000a68:	d105      	bne.n	8000a76 <__libc_init_array+0x2e>
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
 8000a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a70:	4798      	blx	r3
 8000a72:	3601      	adds	r6, #1
 8000a74:	e7ee      	b.n	8000a54 <__libc_init_array+0xc>
 8000a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a7a:	4798      	blx	r3
 8000a7c:	3601      	adds	r6, #1
 8000a7e:	e7f2      	b.n	8000a66 <__libc_init_array+0x1e>
 8000a80:	08000aa8 	.word	0x08000aa8
 8000a84:	08000aa8 	.word	0x08000aa8
 8000a88:	08000aa8 	.word	0x08000aa8
 8000a8c:	08000aac 	.word	0x08000aac

08000a90 <_init>:
 8000a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a92:	bf00      	nop
 8000a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a96:	bc08      	pop	{r3}
 8000a98:	469e      	mov	lr, r3
 8000a9a:	4770      	bx	lr

08000a9c <_fini>:
 8000a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9e:	bf00      	nop
 8000aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa2:	bc08      	pop	{r3}
 8000aa4:	469e      	mov	lr, r3
 8000aa6:	4770      	bx	lr
